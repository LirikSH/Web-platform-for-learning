// Рассылка количества интервалов всем процессам (в том числе и себе) 
MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD); 
if(n==0) done = 1; else { h = 1.0 / (double) n; sum = 0.0; 

// Расчет площадей прямоугольников, закрепленных за процессом 
for(i = myid + 1 ; (i <= n) ; i += numprocs) {
x = h * ((double)i - 0.5); 
sum += (4.0/(1.0 + x*x)); } 
mypi = h * sum; 

// Передача 0-му процессу и итоговое суммирование частных сумм 
// (mypi)процессов в переменной pi 
MPI_Reduce(&mypi, &pi, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD); 

// Если это главный процесс, вывод полученного результата 
if(myid==0) {
 printf("PI is approximately %.16f, Error is %.16f\n", pi, fabs(pi - PI25DT)); 
endwtime = MPI_Wtime(); 
printf("wall clock time = %f\n", endwtimestartwtime); 
fflush(stdout); 
} } } 

// Освобождение подсистемы MPI 
MPI_Finalize(); 
return 0; 
}
